<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_body</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>obj_shadow_parent</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the player
// Sprite Variables
image_speed = 0;                            //set to 0, player has different frames we will use

// Create the character parts
var head = instance_create(x, y, obj_head); //creating variable head and placing head object at our x,y position
head.creator = id;                         //assigning an ID so we can adjust the instance

var cape_top = instance_create(x, y, obj_cape_top);
cape_top.creator = id; // cape_top will then create the other 2 pieces of the cape.

with (cape_top) {
    var cape_middle = instance_create(x, y, obj_cape_middle);
    cape_middle.creator = id; //doesn't need to use cape_top id, because WITH statement puts us inside the cape_top anyway.
    cape_middle.lag = true;  //causes visual lag
    
    var cape_bottom = instance_create(x, y, obj_cape_bottom);
    cape_bottom.creator = id;
    cape_bottom.lag = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// This is the spell alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control the Player
image_angle = point_direction (x, y, mouse_x, mouse_y); //gets direction from us to the mouse and faces that direction

// Get the input
var right = keyboard_check(vk_right) || keyboard_check(ord('D')); //says player can either press right key or D key to move right. Returns true if true and moves right.
var left = keyboard_check(vk_left) || keyboard_check(ord('A'));
var up = keyboard_check(vk_up) || keyboard_check(ord('W'));
var down = keyboard_check(vk_down) || keyboard_check(ord('S'));

// Move the player
// Right
if (right)  {
    motion_add(0, 1) ; //adds a speed of 1. (direction, acceleration)
}
// Left
if (left)  {
    motion_add(180, 1) ; 
}
// Up
if (up)  {
    motion_add(90, 1) ; 
}
// Down
if (down)  {
    motion_add(270, 1) ; 
}

// Fire the spell (later melee attack?)
if (mouse_check_button(mb_left)) {
   //checks if you have enough mana for spell
    if (alarm[0] == -1 &amp;&amp; global.spellcost &lt;= global.mana) {
        instance_create(x, y, obj_fireball);
        global.mana -= global.spellcost;
    }
} else { //if the mouse isn't held, mana will recharge.
    if (global.mana &lt; global.maxmana) {
        global.mana += global.maxmana/50;
        if (global.mana &gt; global.maxmana) {
            global.mana = global.maxmana; //sets mana back  to maxmana if mana value ends up over max.
        } 
    }
}

// Sets the speed - Don't move too fast
if (speed &gt;= 4) {
    speed = 4;
}
// Set the friction
if (!right &amp;&amp; !left &amp;&amp; !up &amp;&amp; !down) {
    friction = 1;
} else {
    friction = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
