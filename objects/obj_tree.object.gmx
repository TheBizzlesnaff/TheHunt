<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the tree

// Going to create 3 arrays to (1)hold reference to the different tree sprites, (2)the different offsets for each layer, (3) the angle of each piece

leaves[0] = spr_leaves_one;
leaves[1] = spr_leaves_two;
leaves[2] = spr_leaves_three;
leaves[3] = spr_leaves_four;
leaves[4] = spr_leaves_five;

// mess around with these values to find out the offset. The 5*x isnt magic-numbering, it's the result of funking around with values.
offset[0] = 112;
offset[1] = 112/5*4;
offset[2] = 112/5*3;
offset[3] = 112/5*2;
offset[4] = 112/5;

for (var i=0; i&lt;4; i++) {
    angle[i] = random(360);
}

dir = 0;
dis = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control the perspective of the leaves

// making 3 local variables

// what this does is get the x position of whatever view index is passed into the array. in this case its view_current.
// 

var xview = view_xview[ view_current ];
var yview = view_yview[ view_current ];
var wview = view_wview[ view_current ]/2;
var hview = view_hview[ view_current ]/2;

//gets distance from the center of the view to the tree object.
dis = point_distance(xview+wview, yview+hview, x, y); 

// Make sure we are in the room before we do any of this.
// 480 isn't exact, but it will work.

if (dis&gt;480) exit; //if the trees distance is greater than 480, don't worry about it. Makes less code run. Optimizes. No reason to worry about trees not in view.

//gets the direction to the view center
dir = point_direction(xview+wview, yview+hview, x, y); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the leaves according to the view location.

// Exit if we are outside the view
if (dis &gt; 480) exit;

// Calculate the x and y offsets.
// Not my own calculations. Taken from heartbeast.
for (var i=0; i&lt;4; i++) {
    var calc = (dis/4)*(((offset[i]*-1)/112)+1); 
    var xdis = lengthdir_x(calc,dir);
    var ydis = lengthdir_y(calc,dir);
    
    // Draw the shadow
    var shadow_calc = offset[i]/120/20;
    var shadow_offset = (((offset[i]*-1)/112)+1)*80;
    draw_sprite_ext(leaves[i], image_index, x+(offset[i]/8), y+(offset[i]/8), 1, 1, angle[i], c_black, shadow_calc+.1);
    draw_sprite_ext(leaves[i], image_index, x+shadow_offset, y+shadow_offset, 1, 1, angle[i], c_black, shadow_calc+.025);
    
    // Draw the leaves
    draw_sprite_ext(leaves[i], image_index, x+xdis, y+ydis, 1, 1, angle[i], image_blend, 1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
